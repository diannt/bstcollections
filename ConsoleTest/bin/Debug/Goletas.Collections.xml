<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Goletas.Collections</name>
    </assembly>
    <members>
        <member name="T:BST.Collections.ICollection`1">
            <summary>
            Represents a general-purpose collection.
            </summary>
            <remarks>
            The <see cref="T:BST.Collections.ICollection`1"/> is the most general
            interface in the <see cref="N:BST.Collections"/> hierarchy.
            Implementations can vary in whether they allow the items in the
            collection to be a <c>null</c> reference.
            </remarks>
            <typeparam name="T">
            The element type of the <see cref="T:BST.Collections.ICollection`1"/>.
            </typeparam>
        </member>
        <member name="M:BST.Collections.ICollection`1.Add(`0)">
            <summary>
            Adds the <paramref name="item"/> to the <see cref="T:BST.Collections.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:BST.Collections.ICollection`1"/>.
            </param>
            <returns>
            <c>true</c> if the <paramref name="item"/> was successfully added to the
            <see cref="T:BST.Collections.ICollection`1"/>; otherwise, <c>false</c>.
            This method also returns <c>false</c> if a particular
            <see cref="T:BST.Collections.ICollection`1"/> implementation supports only unique
            elements and the collection already contains the specified <paramref name="item"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:BST.Collections.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.ICollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:BST.Collections.ICollection`1"/> contains
            a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:BST.Collections.ICollection`1"/>.
            </param>
            <returns>
            <c>true</c> if the <paramref name="item"/> is found in the
            <see cref="T:BST.Collections.ICollection`1"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Implementations can vary in how they determine equality of objects.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.ICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.ICollection`1"/> elements to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            elements copied from this <see cref="T:BST.Collections.ICollection`1"/>.
            The <paramref name="Array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of the <paramref name="array"/> bounds.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BST.Collections.ICollection`1"/>
            is greater than the available space from the <paramref name="index"/> to the end
            of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.ICollection`1.Remove(`0)">
            <summary>
            Removes the <paramref name="item"/> from the <see cref="T:BST.Collections.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:BST.Collections.ICollection`1"/>.
            </param>
            <returns>
            <para>
            <c>true</c> if the <paramref name="item"/> was successfully removed from the
            <see cref="T:BST.Collections.ICollection`1"/>; otherwise, <c>false</c>. This method
            also returns <c>false</c> if the <paramref name="item"/> is not found
            in the original <see cref="T:BST.Collections.ICollection`1"/>.
            </para>
            <para>
            Implementations can vary in how they deal with single or multiple occurences
            of an element in the <see cref="T:BST.Collections.ICollection`1"/> and in which order
            the elements are removed.
            </para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:BST.Collections.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.ICollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:BST.Collections.ICollection`1"/>.
            </summary>
            <remarks>
            <see cref="P:BST.Collections.ICollection`1.Count"/> must be set to zero, and references to other objects
            from elements of the collection must be released.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:BST.Collections.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="P:BST.Collections.ICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BST.Collections.ICollection`1"/>
            is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:BST.Collections.ICollection`1"/> is read-only;
            otherwise, <c>false</c>.
            </value>
            <remarks>
            A collection that is read-only does not allow the addition, removal or
            modification of elements after the collection is created.
            </remarks>
        </member>
        <member name="P:BST.Collections.ICollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:BST.Collections.ICollection`1"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:BST.Collections.ICollection`1"/>.
            </value>
        </member>
        <member name="T:BST.Collections.IDictionary`2">
            <summary>
            Represents a collection of key/value pairs.
            </summary>
            <remarks>
            <para>
            Each element in the <see cref="T:BST.Collections.IDictionary`2"/> interface is a
            key/value pair stored in the <see cref="T:BST.Collections.KeyValuePair`2"/> structure.
            </para>
            <para>
            Each pair must have a unique <see cref="P:BST.Collections.KeyValuePair`2.Key"/>.
            Implementations can vary in whether they allow the key to be a <c>null</c>
            reference. The <see cref="P:BST.Collections.KeyValuePair`2.Value"/> can be a <c>null</c>
            reference and does not have to be unique. The <see cref="T:BST.Collections.IDictionary`2"/>
            interface allows the contained keys and values to be enumerated, but it does not
            imply any particular sort order.
            </para>
            </remarks>
            <typeparam name="K">
            The type of keys in the <see cref="T:BST.Collections.IDictionary`2"/>.
            </typeparam>
            <typeparam name="V">
            The type of values in the <see cref="T:BST.Collections.IDictionary`2"/>.
            </typeparam>
        </member>
        <member name="M:BST.Collections.IDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided <paramref name="key"/> and
            <paramref name="value"/> to the <see cref="T:BST.Collections.IDictionary`2"/>. 
            </summary>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <returns>
            <c>true</c> if the element was successfully added to the
            <see cref="T:BST.Collections.IDictionary`2"/>; otherwise, <c>false</c>.
            This method also returns <c>false</c> if a particular
            <see cref="T:BST.Collections.IDictionary`2"/> implementation supports only unique
            keys and the dictionary already contains the specified <paramref name="key"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:BST.Collections.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.IDictionary`2.CopyTo(BST.Collections.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.IDictionary`2"/> key/value pairs to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            key/value pairs copied from this <see cref="T:BST.Collections.IDictionary`2"/>.
            The <paramref name="array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of <paramref name="array"/> bounds.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of key/value pairs in the source <see cref="T:BST.Collections.IDictionary`2"/>
            is greater than the available space from the <paramref name="index"/> to the end
            of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.IDictionary`2.Retrieve(`0,`1@)">
            <summary>
            Retrieves the value associated with the specified <paramref name="key"/>. 
            </summary>
            <param name="key">
            The key whose value to retrieve.
            </param>
            <param name="value">
            If the key is found, the value associated with the specified <paramref name="key"/>;
            otherwise, the default value for the type of the <paramref name="value"/> parameter.
            </param>
            <returns>
            <c>true</c> if <see cref="T:BST.Collections.IDictionary`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.IDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified <paramref name="key"/>
            from the <see cref="T:BST.Collections.IDictionary`2"/>.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <returns>
            <c>true</c> if the element is successfully removed; otherwise, <c>false</c>.
            This method also returns false if the <paramref name="key"/> was not found in
            the original <see cref="T:BST.Collections.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:BST.Collections.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.IDictionary`2.Clear">
            <summary>
            Removes all key/value pairs from the <see cref="T:BST.Collections.IDictionary`2"/>.
            </summary>
            <remarks>
            <see cref="P:BST.Collections.IDictionary`2.Count"/> must be set to zero, and references to other objects
            from key/value pairs of the dictionary must be released.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:BST.Collections.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="P:BST.Collections.IDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BST.Collections.IDictionary`2"/>
            is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:BST.Collections.IDictionary`2"/> is read-only;
            otherwise, <c>false</c>.
            </value>
            <remarks>
            A dictionary that is read-only does not allow the addition, removal or
            modification of elements after the dictionary is created.
            </remarks>
        </member>
        <member name="P:BST.Collections.IDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:BST.Collections.IDictionary`2"/>.
            </summary>
            <value>
            The number of key/value pairs contained in the <see cref="T:BST.Collections.IDictionary`2"/>.
            </value>
        </member>
        <member name="P:BST.Collections.IDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified <paramref name="key"/>.
            </summary>
            <value>
            The element with the specified <paramref name="key"/>.
            </value>
            <param name="key">
            The key of the element to get or set.
            </param>
            <returns>
            The value of the element with the specified <paramref name="key"/>.
            </returns>
            <remarks>
            You can use the <see cref="P:BST.Collections.IDictionary`2.Item(`0)"/> property to add new elements by setting
            the value of a key that does not exist in the <see cref="T:BST.Collections.IDictionary`2"/>.
            If the specified <paramref name="key"/> already exists in the dictionary,
            setting the <see cref="P:BST.Collections.IDictionary`2.Item(`0)"/> property overwrites the old value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and the <paramref name="key"/> is not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:BST.Collections.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="P:BST.Collections.IDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:BST.Collections.ICollection`1"/> containing the keys of the
            <see cref="T:BST.Collections.IDictionary`2"/>. 
            </summary>
            <value>
            An <see cref="T:BST.Collections.ICollection`1"/> containing the keys of the
            object that implements <see cref="T:BST.Collections.IDictionary`2"/>. 
            </value>
        </member>
        <member name="P:BST.Collections.IDictionary`2.Values">
            <summary>
            Gets an <see cref="T:BST.Collections.ICollection`1"/> containing the values of the
            <see cref="T:BST.Collections.IDictionary`2"/>. 
            </summary>
            <value>
            An <see cref="T:BST.Collections.ICollection`1"/> containing the values of the
            object that implements <see cref="T:BST.Collections.IDictionary`2"/>. 
            </value>
        </member>
        <member name="T:BST.Collections.ILinkedStack`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BST.Collections.ILinkedStack`1.Push(`0)">
            <summary>
            Adds an object on top of the <see cref="T:BST.Collections.LinkedStack`1"/>. 
            </summary>
            <param name="item">
            The object to push onto the <see cref="T:BST.Collections.LinkedStack`1"/>.
            The <paramref name="item"/> can be <c>null</c> for reference types.
            </param>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:BST.Collections.ILinkedStack`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            The value can be <c>null</c> for reference types.
            </param>
            <returns>
            <c>true</c> if the <paramref name="item"/> is found in the
            <see cref="T:BST.Collections.LinkedStack`1"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            This method determines equality by calling <see cref="!:Object.Equals(object)"/>.
            To enhance performance, it is recommended that in addition to implementing
            <see cref="!:Object.Equals(object)"/>, any class/struct also implement
            <see cref="!:IEquatable&lt;T&gt;"/> interface for their own type.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.ILinkedStack`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:BST.Collections.ILinkedStack`1.Peek">
            <summary>
            Returns the object at the top of the <see cref="T:BST.Collections.LinkedStack`1"/>
            without removing it.
            </summary>
            <returns>
            The object at the top of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            <para>
            This method is similar to the <see cref="M:BST.Collections.ILinkedStack`1.Pop"/> method, but <see cref="M:BST.Collections.ILinkedStack`1.Peek"/>
            does not modify the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
            <exception cref="!:InvalidOperationException">
            The <see cref="T:BST.Collections.LinkedStack`1"/> is empty.
            </exception>
        </member>
        <member name="M:BST.Collections.ILinkedStack`1.Pop">
            <summary>
            Removes and returns the object at the top of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <returns>
            The object removed from the top of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            <para>
            This method is similar to the <see cref="M:BST.Collections.ILinkedStack`1.Peek"/> method, but <see cref="M:BST.Collections.ILinkedStack`1.Peek"/>
            does not modify the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
            <exception cref="!:InvalidOperationException">
            The <see cref="T:BST.Collections.LinkedStack`1"/> is empty.
            </exception>
        </member>
        <member name="M:BST.Collections.ILinkedStack`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:BST.Collections.LinkedStack`1"/>. 
            </summary>
            <remarks>
            <para>
            <see cref="P:BST.Collections.ILinkedStack`1.Count"/> is set to zero and references to other objects
            from elements of the collection are also released.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:BST.Collections.ILinkedStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.LinkedStack`1"/> elements to an existing
            one-dimensional <see cref="!:Array"/>, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="!:Array"/> that is the destination of the elements
            copied from this <see cref="T:BST.Collections.LinkedStack`1"/>. The <paramref name="array"/>
            must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <remarks>
            <para>
            The elements are copied to the <paramref name="array"/> in last-in-first-out (LIFO)
            order, similar to the order of the elements returned by a succession of calls to
            the <see cref="M:BST.Collections.ILinkedStack`1.Pop"/> method.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.ILinkedStack`1.Count"/>.
            </para>
            </remarks>
            <exception cref="!:ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="!:ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of the <paramref name="array"/> bounds.
            </exception>
            <exception cref="!:ArgumentException">
            The number of elements in the source <see cref="T:BST.Collections.LinkedStack`1"/>
            is greater than the available space from the <paramref name="index"/> to the end
            of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.ILinkedStack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.LinkedStack`1.Enumerator"/>
            for the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.ILinkedStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="T:BST.Collections.KeyValuePair`2">
            <summary>
            Represents a key/value pair.
            </summary>
            <typeparam name="K">
            The type of the <see cref="P:BST.Collections.KeyValuePair`2.Key"/> contained
            in the <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </typeparam>
            <typeparam name="V">
            The type of the <see cref="P:BST.Collections.KeyValuePair`2.Value"/> contained
            in the <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </typeparam>
        </member>
        <member name="F:BST.Collections.KeyValuePair`2._Key">
            <summary>
            The key contained in this <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="F:BST.Collections.KeyValuePair`2._Value">
            <summary>
            The value contained in this <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.KeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.KeyValuePair`2"/>
            structure with the specified key and value.
            </summary>
            <param name="key">
            The key identifying each <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </param>
            <param name="value">
            The definition associated with the <paramref name="key"/>
            of this <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </param>
        </member>
        <member name="P:BST.Collections.KeyValuePair`2.Key">
            <summary>
            Gets the key contained in this <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </summary>
            <value>
            The key contained in this <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </value>
        </member>
        <member name="P:BST.Collections.KeyValuePair`2.Value">
            <summary>
            Gets the value contained in this <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </summary>
            <value>
            The value contained in this <see cref="T:BST.Collections.KeyValuePair`2"/>.
            </value>
        </member>
        <member name="T:BST.Collections.LinkedStack`1">
            <summary>
            Represents a variable size last-in-first-out (LIFO) collection
            of objects of the same arbitrary type.
            </summary>
            <remarks>
            <para>
            <see cref="T:BST.Collections.LinkedStack`1"/> is implemented as a singly linked list.
            </para>
            <para>
            <see cref="T:BST.Collections.LinkedStack`1"/> provides guaranteed O(1) time cost
            for the <see cref="M:BST.Collections.LinkedStack`1.Push(`0)"/> and <see cref="M:BST.Collections.LinkedStack`1.Pop"/> operations.
            </para>
            <para>
            <see cref="T:BST.Collections.LinkedStack`1"/> accepts <c>null</c> as a valid value
            for reference types and allows duplicate elements.
            </para>
            </remarks>
            <typeparam name="T">
            The element type of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </typeparam>
        </member>
        <member name="F:BST.Collections.LinkedStack`1._Top">
            <summary>
            The top node of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            If this field is <c>null</c>, then the stack is empty.
            </summary>
        </member>
        <member name="F:BST.Collections.LinkedStack`1._Count">
            <summary>
            The number of elements contained in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Push(`0)">
            <summary>
            Adds an object on top of the <see cref="T:BST.Collections.LinkedStack`1"/>. 
            </summary>
            <param name="item">
            The object to push onto the <see cref="T:BST.Collections.LinkedStack`1"/>.
            The <paramref name="item"/> can be <c>null</c> for reference types.
            </param>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            The value can be <c>null</c> for reference types.
            </param>
            <returns>
            <c>true</c> if the <paramref name="item"/> is found in the
            <see cref="T:BST.Collections.LinkedStack`1"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            This method determines equality by calling <see cref="M:System.Object.Equals(System.Object)"/>.
            To enhance performance, it is recommended that in addition to implementing
            <see cref="M:System.Object.Equals(System.Object)"/>, any class/struct also implement
            <see cref="T:System.IEquatable`1"/> interface for their own type.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.LinkedStack`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Peek">
            <summary>
            Returns the object at the top of the <see cref="T:BST.Collections.LinkedStack`1"/>
            without removing it.
            </summary>
            <returns>
            The object at the top of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            <para>
            This method is similar to the <see cref="M:BST.Collections.LinkedStack`1.Pop"/> method, but <see cref="M:BST.Collections.LinkedStack`1.Peek"/>
            does not modify the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:BST.Collections.LinkedStack`1"/> is empty.
            </exception>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Pop">
            <summary>
            Removes and returns the object at the top of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <returns>
            The object removed from the top of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            <para>
            This method is similar to the <see cref="M:BST.Collections.LinkedStack`1.Peek"/> method, but <see cref="M:BST.Collections.LinkedStack`1.Peek"/>
            does not modify the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:BST.Collections.LinkedStack`1"/> is empty.
            </exception>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:BST.Collections.LinkedStack`1"/>. 
            </summary>
            <remarks>
            <para>
            <see cref="P:BST.Collections.LinkedStack`1.Count"/> is set to zero and references to other objects
            from elements of the collection are also released.
            </para>
            <para>
            This method is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.LinkedStack`1"/> elements to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from this <see cref="T:BST.Collections.LinkedStack`1"/>. The <paramref name="array"/>
            must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <remarks>
            <para>
            The elements are copied to the <paramref name="array"/> in last-in-first-out (LIFO)
            order, similar to the order of the elements returned by a succession of calls to
            the <see cref="M:BST.Collections.LinkedStack`1.Pop"/> method.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.LinkedStack`1.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of the <paramref name="array"/> bounds.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BST.Collections.LinkedStack`1"/>
            is greater than the available space from the <paramref name="index"/> to the end
            of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.LinkedStack`1.Enumerator"/>
            for the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.LinkedStack`1.Enumerator"/>
            for the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.LinkedStack`1.Enumerator"/>
            for the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </returns>
            <remarks>
            This method is an O(1) operation.
            </remarks>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.LinkedStack`1"/> class.
            </summary>
            <remarks>
            This constructor is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.LinkedStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="T:BST.Collections.LinkedStack`1.Node">
            <summary>
            Represents a node in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <remarks>
            The <see cref="T:BST.Collections.LinkedStack`1.Node"/> contains a value and a reference to the next node.
            </remarks>
        </member>
        <member name="F:BST.Collections.LinkedStack`1.Node.Item">
            <summary>
            The object contained in this node.
            </summary>
        </member>
        <member name="F:BST.Collections.LinkedStack`1.Node.Next">
            <summary>
            The reference to the next node in the <see cref="T:BST.Collections.LinkedStack`1"/> or <c>null</c>
            if this <see cref="T:BST.Collections.LinkedStack`1.Node"/> is the last node in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Node.#ctor(`0,BST.Collections.LinkedStack{`0}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.LinkedStack`1.Node"/> class containing the specified
            object and the reference to the next node in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <param name="item">
            The object to contain in the <see cref="T:BST.Collections.LinkedStack`1.Node"/>.
            </param>
            <param name="next">
            The reference to the next node in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </param>
        </member>
        <member name="T:BST.Collections.LinkedStack`1.Enumerator">
            <summary>
            Enumerates the elements of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <remarks>
            <para>
            The elements are enumerated in last-in-first-out (LIFO) order, similar to the
            order of the elements returned by a succession of calls to the <see cref="M:BST.Collections.LinkedStack`1.Pop"/>
            method.
            </para>
            <para>
            Initially, the enumerator is positioned before the first element in the collection.
            At this position, <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> is undefined. Therefore, <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/>
            must be called to advance the enumerator to the first element of the collection before
            reading the value of <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/>.
            </para>
            <para>
            <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> returns the same object until <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> is
            called. <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> sets <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> to the next element.
            </para>
            <para>
            If <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> passes the end of the collection, the enumerator is
            positioned after the last element in the collection and <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/>
            returns <c>false</c>. When the enumerator is at this position, subsequent calls to
            <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> also return <c>false</c>. If the last call to
            <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> returned <c>false</c>, <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> is undefined.
            <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> cannot be set to the first element of the collection again.
            A new enumerator instance must be created instead.
            </para>
            <para>
            An enumerator remains valid as long as the collection remains unchanged. If changes
            are made to the collection, such as adding, modifying, or deleting elements, the
            enumerator behavior is undefined.
            </para>
            <para>
            The enumerator does not have exclusive access to the collection; therefore,
            enumerating through a collection is intrinsically not a thread-safe procedure.
            To guarantee thread safety during enumeration, the collection can be locked
            during the entire enumeration. To allow the collection to be accessed by
            multiple threads for reading and writing, a custom synchronization must be
            implemented.
            </para>
            <para>
            The <see cref="T:BST.Collections.LinkedStack`1.Enumerator"/> is not designed to provide
            any fast-fail safety mechanisms against concurrent modifications.
            </para>
            </remarks>
        </member>
        <member name="F:BST.Collections.LinkedStack`1.Enumerator._Next">
            <summary>
            The <see cref="T:BST.Collections.LinkedStack`1.Node"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="F:BST.Collections.LinkedStack`1.Enumerator._Current">
            <summary>
            The element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:BST.Collections.LinkedStack`1"/>.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <remarks>
            <para>
            After an enumerator is created, the enumerator is positioned before the first element
            in the collection, and the first call to <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> advances the
            enumerator to the first element of the collection.
            </para>
            <para>
            If <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> passes the end of the collection, the enumerator is positioned
            after the last element in the collection and <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> returns <c>false</c>.
            When the enumerator is at this position, subsequent calls to <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/>
            also return <c>false</c>.
            </para> 
            </remarks>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the <see cref="T:BST.Collections.LinkedStack`1"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown since this operation is not supported.
            </exception>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Enumerator.System#IDisposable#Dispose">
            <summary>
            Releases all resources allocated by the <see cref="T:BST.Collections.LinkedStack`1.Enumerator"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.LinkedStack`1.Enumerator.#ctor(BST.Collections.LinkedStack{`0}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.LinkedStack`1.Enumerator"/>
            structure with the specified <paramref name="node"/>.
            </summary>
            <param name="node">
            The node from which to start enumerating the
            <see cref="T:BST.Collections.LinkedStack`1"/> elements.
            </param>
        </member>
        <member name="P:BST.Collections.LinkedStack`1.Enumerator.Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.LinkedStack`1"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.LinkedStack`1"/>
            at the current position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> returns the same object until <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> sets <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="P:BST.Collections.LinkedStack`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.LinkedStack`1"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.LinkedStack`1"/>
            at the current position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> returns the same object until <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.LinkedStack`1.Enumerator.MoveNext"/> sets <see cref="P:BST.Collections.LinkedStack`1.Enumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedDictionary`2">
            <summary>
            Represents a collection of key/value pairs that are sorted on the key.
            </summary>
            <remarks>
            <para>
            Each element in the <see cref="T:BST.Collections.SortedDictionary`2"/> is a
            key/value pair stored in the <see cref="T:BST.Collections.KeyValuePair`2"/> object.
            </para>
            <para>
            A key cannnot be a <c>null</c> reference. Each key must be unique within
            <see cref="T:BST.Collections.SortedDictionary`2"/>. Keys must be immutable for the
            <see cref="T:System.IComparable`1"/> interface as long as they are used as
            keys in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </para>
            <para>
            This <see cref="T:BST.Collections.SortedDictionary`2"/> uses the same algorithms as the
            <see cref="T:BST.Collections.SortedSet`1"/> to store and manage its elements.
            </para>
            </remarks>
            <typeparam name="K">
            The type of keys in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </typeparam>
            <typeparam name="V">
            The type of values in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </typeparam>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2._Root">
            <summary>
            The root node of this <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2._Count">
            <summary>
            The number of elements contained in this <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2._Keys">
            <summary>
            The <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> containing the
            keys in the <see cref="T:BST.Collections.SortedDictionary`2"/>
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2._Values">
            <summary>
            The <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> containing the
            values in the <see cref="T:BST.Collections.SortedDictionary`2"/>
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided <paramref name="key"/> and
            <paramref name="value"/> to the <see cref="T:BST.Collections.SortedDictionary`2"/>. 
            </summary>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <returns>
            <c>true</c> if this <see cref="T:BST.Collections.SortedDictionary`2"/> did not
            already contain the specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.Replace(`0,`1)">
            <summary>
            Overwrites the value for the specified <paramref name="key"/> in the
            <see cref="T:BST.Collections.SortedDictionary`2"/> with the new <paramref name="value"/>.
            </summary>
            <param name="key">
            The key whose value to replace.
            </param>
            <param name="value">
            The value to associate with the specified <paramref name="key"/>.
            </param>
            <returns>
            <c>true</c> if an element with the speficied <paramref name="key"/>
            was found and updated with the new <paramref name="value"/>; otherwise,
            <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.Retrieve(`0,`1@)">
            <summary>
            Retrieves the value associated with the specified <paramref name="key"/>. 
            </summary>
            <param name="key">
            The key whose value to retrieve.
            </param>
            <param name="value">
            If the key is found, the value associated with the specified <paramref name="key"/>;
            otherwise, the default value for the type of the <paramref name="value"/> parameter.
            </param>
            <returns>
            <c>true</c> if the <see cref="T:BST.Collections.SortedDictionary`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified <paramref name="key"/>
            from the the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <returns>
            <c>true</c> if this <see cref="T:BST.Collections.SortedDictionary`2"/>
            contained the specified element; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.Clear">
            <summary>
            Removes all elements from this <see cref="T:BST.Collections.SortedDictionary`2"/>. 
            </summary>
            <remarks>
            <para>
            This method is an O(1) operation.
            </para>
            <para>
            The <see cref="P:BST.Collections.SortedDictionary`2.Count"/> property is set to zero, and references to other
            objects from elements of the collection are also released.
            </para>
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.CopyTo(BST.Collections.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.SortedDictionary`2"/> elements to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from this <see cref="T:BST.Collections.SortedDictionary`2"/>.
            The <paramref name="array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <remarks>
            <para>
            The elements are copied to the <paramref name="array"/> in ascending order.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of <paramref name="array"/> bounds.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BST.Collections.SortedDictionary`2"/>
            is greater than the available space from the <paramref name="index"/> to the end
            of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.System#Collections#Generic#IEnumerable{BST#Collections#KeyValuePair{K@V}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2"/> class.
            </summary>
            <remarks>
            This constructor is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">
            The key of the element to get or set.
            </param>
            <returns>
            The value of the element with the specified <paramref name="key"/>.
            </returns>
            <remarks>
            <para>
            The <see cref="P:BST.Collections.SortedDictionary`2.Item(`0)"/> property can be used to add new elements by setting
            the value of a key that does not exist in <see cref="T:BST.Collections.SortedDictionary`2"/>.
            If the specified <paramref name="key"/> already exists in the dictionary,
            setting the <see cref="P:BST.Collections.SortedDictionary`2.Item(`0)"/> property overwrites the old value.
            </para>
            <para>
            Accessing this property is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and the <paramref name="key"/> is not found.
            </exception>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the the <see cref="T:BST.Collections.SortedDictionary`2"/>. 
            </summary>
            <value>
            The <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> containing the
            keys in the <see cref="T:BST.Collections.SortedDictionary`2"/>
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:BST.Collections.SortedDictionary`2"/>. 
            </summary>
            <value>
            The <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> containing the
            values in the <see cref="T:BST.Collections.SortedDictionary`2"/>
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.BST#Collections#IDictionary{K@V}#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:BST.Collections.SortedDictionary`2"/>. 
            </summary>
            <value>
            The <see cref="T:BST.Collections.ICollection`1"/> containing the
            keys in the <see cref="T:BST.Collections.SortedDictionary`2"/>
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.BST#Collections#IDictionary{K@V}#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:BST.Collections.SortedDictionary`2"/>. 
            </summary>
            <value>
            The <see cref="T:BST.Collections.ICollection`1"/> containing the
            values in the <see cref="T:BST.Collections.SortedDictionary`2"/>
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in this <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <value>
            The number of key/value pairs contained in this <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.BST#Collections#IDictionary{K@V}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BST.Collections.SortedDictionary`2"/>
            is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:BST.Collections.SortedDictionary`2"/> is read-only;
            otherwise, <c>false</c>. This property always returns <c>false</c>.
            </value>
            <remarks>
            <para>
            A collection that is read-only does not allow the addition, removal or
            modification of elements after the collection is created.
            </para>
            <para>
            Retrieving the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedDictionary`2.Node">
            <summary>
            Represents a node in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <remarks>
            The <see cref="T:BST.Collections.SortedDictionary`2.Node"/> contains a key/value pair, a reference to the parent
            node, a reference to the left child node, a reference to the right child node
            and a balance factor for this node.
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.Node.Item">
            <summary>
            The key/value pair contained in this node.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.Node.Parent">
            <summary>
            The reference to the parent node of this <see cref="T:BST.Collections.SortedDictionary`2.Node"/> or <c>null</c> if
            this <see cref="T:BST.Collections.SortedDictionary`2.Node"/> is the root node in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.Node.Left">
            <summary>
            The reference to the left child node of this <see cref="T:BST.Collections.SortedDictionary`2.Node"/>
            or <c>null</c> if this <see cref="T:BST.Collections.SortedDictionary`2.Node"/> has no left child node.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.Node.Right">
            <summary>
            The reference to the right child node of this <see cref="T:BST.Collections.SortedDictionary`2.Node"/>
            or <c>null</c> if this <see cref="T:BST.Collections.SortedDictionary`2.Node"/> has no right child node.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.Node.Balance">
            <summary>
            The balance factor of this node.
            </summary>
            <remarks>
            The balance factor of a node is the height of its right subtree minus the height
            of its left subtree. A node with balance factor 1, 0, or -1 is considered balanced.
            A node with balance factor -2 or 2 is considered unbalanced and requires rebalancing
            the tree.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.Node.#ctor(BST.Collections.KeyValuePair{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2.Node"/> class containing the
            specified key/value pair.
            </summary>
            <param name="item">
            The key/value pair to contain in the <see cref="T:BST.Collections.SortedDictionary`2.Node"/>.
            </param>
            <remarks>
            The <see cref="F:BST.Collections.SortedDictionary`2.Node.Parent"/>, <see cref="F:BST.Collections.SortedDictionary`2.Node.Left"/>, and <see cref="F:BST.Collections.SortedDictionary`2.Node.Right"/> fields are
            initialized to <c>null</c>. The <see cref="F:BST.Collections.SortedDictionary`2.Node.Balance"/> factor field is initialized
            to zero.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.Node.#ctor(BST.Collections.KeyValuePair{`0,`1},BST.Collections.SortedDictionary{`0,`1}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2.Node"/> class containing the
            specified key/value pair and the reference to the parent node of this
            <see cref="T:BST.Collections.SortedDictionary`2.Node"/>.
            </summary>
            <param name="item">
            The key/value pair to contain in the <see cref="T:BST.Collections.SortedDictionary`2.Node"/>.
            </param>
            <param name="parent">
            The reference to the parent node of this <see cref="T:BST.Collections.SortedDictionary`2.Node"/>.
            </param>
            <remarks>
            The <see cref="F:BST.Collections.SortedDictionary`2.Node.Left"/> and <see cref="F:BST.Collections.SortedDictionary`2.Node.Right"/> fields are initialized to
            <c>null</c>. The <see cref="F:BST.Collections.SortedDictionary`2.Node.Balance"/> factor field is initialized to zero.
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedDictionary`2.KeyCollection">
            <summary>
            Represents a collection of keys in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <remarks>
            The <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> is not a static copy; instead, the
            <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> refers back to the keys in the original
            <see cref="T:BST.Collections.SortedDictionary`2"/>. Therefore, changes to the
            <see cref="T:BST.Collections.SortedDictionary`2"/> continue to be reflected in
            the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.KeyCollection._Dictionary">
            <summary>
            The dictionary for which this <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> was created.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            Determines whether this <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> contains a specific key.
            </summary>
            <param name="item">
            The key to locate in this <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </param>
            <returns>
            <c>true</c>, if the <paramref name="item"/> is found in this
            <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> elements to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from this <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            The <paramref name="array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <remarks>
            <para>
            The elements are copied to the <paramref name="array"/> in ascending order.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of the <paramref name="array"/> bounds.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> is greater
            than the available space from the <paramref name="index"/> to the end of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{K}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.BST#Collections#ICollection{K}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            Always thrown; the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.BST#Collections#ICollection{K}#Remove(`0)">
            <summary>
            Removes the first occurrence of the <paramref name="item"/> from
            the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>. This method always throws
            a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            Always thrown; the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.BST#Collections#ICollection{K}#Clear">
            <summary>
            Removes all items from the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown; the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.#ctor(BST.Collections.SortedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>
            class with the specified <paramref name="dictionary"/>.
            </summary>
            <remarks>
            This constructor is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.KeyCollection.Count">
            <summary>
            Gets the number of elements contained in this <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </summary>
            <value>
            The number of elements contained in this <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.KeyCollection.BST#Collections#ICollection{K}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>
            is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> is read-only;
            otherwise, <c>false</c>. This property always returns <c>true</c>.
            </value>
            <remarks>
            <para>
            A collection that is read-only does not allow the addition, removal, or
            modification of elements after the collection is created.
            </para>
            <para>
            Retrieving the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator">
            <summary>
            Enumerates the elements of the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </summary>
            <remarks>
            <para>
            The elements are enumerated in ascending order.
            </para>
            <para>
            Initially, the enumerator is positioned before the first element in the collection.
            At this position, <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> is undefined. Therefore, <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/>
            must be called to advance the enumerator to the first element of the collection before
            reading the value of <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/>.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> is
            called. <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is
            positioned after the last element in the collection and <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/>
            returns <c>false</c>. When the enumerator is at this position, subsequent calls to
            <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> also return <c>false</c>. If the last call to
            <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> is undefined.
            <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> cannot be set to the first element of the collection again.
            A new enumerator instance must be created instead.
            </para>
            <para>
            An enumerator remains valid as long as the collection remains unchanged. If changes
            are made to the collection, such as adding, modifying, or deleting elements, the
            enumerator behavior is undefined.
            </para>
            <para>
            The enumerator does not have exclusive access to the collection; therefore,
            enumerating through a collection is intrinsically not a thread-safe procedure.
            To guarantee thread safety during enumeration, the collection can be locked
            during the entire enumeration. To allow the collection to be accessed by
            multiple threads for reading and writing, a custom synchronization must be
            implemented.
            </para>
            <para>
            The <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator"/> is not designed to provide
            any fast-fail safety mechanisms against concurrent modifications.
            </para>
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator._Next">
            <summary>
            The <see cref="T:BST.Collections.SortedDictionary`2.Node"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator._Current">
            <summary>
            The element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <remarks>
            <para>
            After an enumerator is created, the enumerator is positioned before the first element
            in the collection, and the first call to <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> advances the
            enumerator to the first element of the collection.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is positioned
            after the last element in the collection and <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> returns <c>false</c>.
            When the enumerator is at this position, subsequent calls to <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/>
            also return <c>false</c>.
            </para> 
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown since this operation is not supported.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.System#IDisposable#Dispose">
            <summary>
            Releases all resources allocated by the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.#ctor(BST.Collections.SortedDictionary{`0,`1}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator"/>
            structure with the specified <paramref name="node"/>.
            </summary>
            <param name="node">
            The node from which to start enumerating the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/>
            elements.
            </param>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> at the current position
            of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedDictionary`2.KeyCollection"/> at the current position
            of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.KeyCollection.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedDictionary`2.ValueCollection">
            <summary>
            Represents a collection of values in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <remarks>
            The <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> is not a static copy; instead, the
            <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> refers back to the keys in the original
            <see cref="T:BST.Collections.SortedDictionary`2"/>. Therefore, changes to the
            <see cref="T:BST.Collections.SortedDictionary`2"/> continue to be reflected in
            the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.ValueCollection._Dictionary">
            <summary>
            The dictionary for which this <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> was created.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.Contains(`1)">
            <summary>
            Determines whether this <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> contains a specific value.
            </summary>
            <param name="item">
            The value to locate in this <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </param>
            <returns>
            <c>true</c>, if the <paramref name="item"/> is found in this
            <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> elements to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from this <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            The <paramref name="array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <remarks>
            <para>
            The elements are copied to <paramref name="array"/> in ascending order.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of the <paramref name="array"/> bounds.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> is greater
            than the available space from the <paramref name="index"/> to the end of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{V}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.BST#Collections#ICollection{V}#Add(`1)">
            <summary>
            Adds an item to the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            Always thrown; the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.BST#Collections#ICollection{V}#Remove(`1)">
            <summary>
            Removes the first occurrence of the <paramref name="Item"/> from
            the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>. This method always throws
            a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            Always thrown; the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.BST#Collections#ICollection{V}#Clear">
            <summary>
            Removes all items from the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown; the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> is read-only.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.#ctor(BST.Collections.SortedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>
            class with the specified <paramref name="dictionary"/>.
            </summary>
            <remarks>
            This constructor is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.ValueCollection.Count">
            <summary>
            Gets the number of elements contained in this <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </summary>
            <value>
            The number of elements contained in this <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.ValueCollection.BST#Collections#ICollection{V}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>
            is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> is read-only;
            otherwise, <c>false</c>. This property always returns <c>true</c>.
            </value>
            <remarks>
            <para>
            A collection that is read-only does not allow the addition, removal, or
            modification of elements after the collection is created.
            </para>
            <para>
            Retrieving the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator">
            <summary>
            Enumerates the elements of the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </summary>
            <remarks>
            <para>
            The elements are enumerated in ascending order for the key.
            </para>
            <para>
            Initially, the enumerator is positioned before the first element in the collection.
            At this position, <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> is undefined. Therefore, <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/>
            must be called to advance the enumerator to the first element of the collection before
            reading the value of <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/>.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> is
            called. <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is
            positioned after the last element in the collection and <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/>
            returns <c>false</c>. When the enumerator is at this position, subsequent calls to
            <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> also return <c>false</c>. If the last call to
            <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> is undefined.
            <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> cannot be set to the first element of the collection again.
            A new enumerator instance must be created instead.
            </para>
            <para>
            An enumerator remains valid as long as the collection remains unchanged. If changes
            are made to the collection, such as adding, modifying, or deleting elements, the
            enumerator behavior is undefined.
            </para>
            <para>
            The enumerator does not have exclusive access to the collection; therefore,
            enumerating through a collection is intrinsically not a thread-safe procedure.
            To guarantee thread safety during enumeration, the collection can be locked
            during the entire enumeration. To allow the collection to be accessed by
            multiple threads for reading and writing, a custom synchronization must be
            implemented.
            </para>
            <para>
            The <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator"/> is not designed to provide
            any fast-fail safety mechanisms against concurrent modifications.
            </para>
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator._Next">
            <summary>
            The <see cref="T:BST.Collections.SortedDictionary`2.Node"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator._Current">
            <summary>
            The element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <remarks>
            <para>
            After an enumerator is created, the enumerator is positioned before the first element
            in the collection, and the first call to <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> advances the
            enumerator to the first element of the collection.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is positioned
            after the last element in the collection and <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> returns <c>false</c>.
            When the enumerator is at this position, subsequent calls to <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/>
            also return <c>false</c>.
            </para> 
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown since this operation is not supported.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.System#IDisposable#Dispose">
            <summary>
            Releases all resources allocated by the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.#ctor(BST.Collections.SortedDictionary{`0,`1}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator"/>
            structure with the specified <paramref name="node"/>.
            </summary>
            <param name="node">
            The node from which to start enumerating the
            <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> elements.
            </param>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> at the current
            position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedDictionary`2.ValueCollection"/> at the current
            position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.ValueCollection.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator">
            <summary>
            Enumerates the key/value pairs of the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <remarks>
            <para>
            The elements are enumerated in ascending order.
            </para>
            <para>
            Initially, the enumerator is positioned before the first element in the collection.
            At this position, <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> is undefined. Therefore, <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/>
            must be called to advance the enumerator to the first element of the collection before
            reading the value of <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/>.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> is
            called. <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is
            positioned after the last element in the collection and <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/>
            returns <c>false</c>. When the enumerator is at this position, subsequent calls to
            <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> also return <c>false</c>. If the last call to
            <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> is undefined.
            <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> cannot be set to the first element of the collection again.
            A new enumerator instance must be created instead.
            </para>
            <para>
            An enumerator remains valid as long as the collection remains unchanged. If changes
            are made to the collection, such as adding, modifying, or deleting elements, the
            enumerator behavior is undefined.
            </para>
            <para>
            The enumerator does not have exclusive access to the collection; therefore,
            enumerating through a collection is intrinsically not a thread-safe procedure.
            To guarantee thread safety during enumeration, the collection can be locked
            during the entire enumeration. To allow the collection to be accessed by
            multiple threads for reading and writing, a custom synchronization must be
            implemented.
            </para>
            <para>
            The <see cref="T:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator"/> is not designed to provide
            any fast-fail safety mechanisms against concurrent modifications.
            </para>
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator._Next">
            <summary>
            The <see cref="T:BST.Collections.SortedDictionary`2.Node"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator._Current">
            <summary>
            The element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <remarks>
            <para>
            After an enumerator is created, the enumerator is positioned before the first element
            in the collection, and the first call to <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> advances the
            enumerator to the first element of the collection.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is positioned
            after the last element in the collection and <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> returns <c>false</c>.
            When the enumerator is at this position, subsequent calls to <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/>
            also return <c>false</c>.
            </para> 
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the <see cref="T:BST.Collections.SortedDictionary`2"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown since this operation is not supported.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.System#IDisposable#Dispose">
            <summary>
            Releases all resources allocated by the <see cref="T:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.#ctor(BST.Collections.SortedDictionary{`0,`1}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator"/>
            structure with the specified <paramref name="node"/>.
            </summary>
            <param name="node">
            The node from which to start enumerating the
            <see cref="T:BST.Collections.SortedDictionary`2"/> elements.
            </param>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedDictionary`2"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedDictionary`2"/> at the current
            position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedDictionary`2"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedDictionary`2"/> at the current
            position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedDictionary`2.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedSet`1">
            <summary>
            Represents a set backed up by a balanced binary tree.
            </summary>
            <remarks>
            <para>
            The binary search tree is kept balanced using the AVL algorithm invented
            by G.M. Adelson-Velsky and E.M. Landis.
            </para>
            <para>
            <see cref="T:BST.Collections.SortedSet`1"/> provides guaranteed O(log2 n) time cost for
            the <see cref="M:BST.Collections.SortedSet`1.Add(`0)"/>, <see cref="M:BST.Collections.SortedSet`1.Contains(`0)"/> and <see cref="M:BST.Collections.SortedSet`1.Remove(`0)"/> operations.
            </para>
            <para>
            <see cref="T:BST.Collections.SortedSet`1"/> elements must be immutable for the
            <see cref="T:System.IComparable`1"/> interface as long as they are used in the
            <see cref="T:BST.Collections.SortedSet`1"/>. Every element in the <see cref="T:BST.Collections.SortedSet`1"/>
            must be unique. An element cannot be a <c>null</c> reference.
            </para>
            </remarks>
            <typeparam name="T">
            The element type of the <see cref="T:BST.Collections.SortedSet`1"/>.
            </typeparam>
        </member>
        <member name="F:BST.Collections.SortedSet`1._Root">
            <summary>
            The root node of this <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedSet`1._Count">
            <summary>
            The number of elements contained in this <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedSet`1.Add(`0)">
            <summary>
            Adds the specified <paramref name="item"/> to this
            <see cref="T:BST.Collections.SortedSet`1"/> if it is not already present.
            </summary>
            <param name="item">
            The item to add to this <see cref="T:BST.Collections.SortedSet`1"/>.
            </param>
            <returns>
            <c>true</c> if this <see cref="T:BST.Collections.SortedSet`1"/> did not
            already contain the specified <paramref name="item"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedSet`1.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedSet`1.Clear">
            <summary>
            Removes all elements from this <see cref="T:BST.Collections.SortedSet`1"/>. 
            </summary>
            <remarks>
            <para>
            This method is an O(1) operation.
            </para>
            <para>
            The <see cref="P:BST.Collections.SortedSet`1.Count"/> property is set to zero, and references to other
            objects from elements of the collection are also released.
            </para>
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedSet`1.Contains(`0)">
            <summary>
            Determines whether this <see cref="T:BST.Collections.SortedSet`1"/>
            contains a specific item.
            </summary>
            <param name="item">
            The item to locate in this <see cref="T:BST.Collections.SortedSet`1"/>.
            </param>
            <returns>
            <c>true</c>, if the <paramref name="item"/> is found in this
            <see cref="T:BST.Collections.SortedSet`1"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedSet`1.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:BST.Collections.SortedSet`1"/> elements to
            an existing one-dimensional <see cref="T:System.Array"/>, starting at the
            specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from this <see cref="T:BST.Collections.SortedSet`1"/>.
            <paramref name="array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in the <paramref name="array"/> at which copying begins.
            </param>
            <remarks>
            <para>
            The elements are copied to the <paramref name="array"/> in ascending order.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:BST.Collections.SortedSet`1.Count"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside of the <paramref name="array"/> bounds.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BST.Collections.SortedSet`1"/>
            is greater than the available space from the <paramref name="index"/> to the end
            of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedSet`1.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedSet`1"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedSet`1.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedSet`1.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedSet`1"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedSet`1.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
            <returns>
            An <see cref="T:BST.Collections.SortedSet`1.AscendingOrderEnumerator"/> for the <see cref="T:BST.Collections.SortedSet`1"/>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedSet`1.Count"/>.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedSet`1.Remove(`0)">
            <summary>
            Removes the specified <paramref name="item"/> from this
            <see cref="T:BST.Collections.SortedSet`1"/> if it is present. 
            </summary>
            <param name="item">
            The item to remove from this <see cref="T:BST.Collections.SortedSet`1"/>,
            if present.
            </param>
            <returns>
            <c>true</c> if this <see cref="T:BST.Collections.SortedSet`1"/>
            contained the specified <paramref name="item"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is an O(log2 n) operation, where n is <see cref="P:BST.Collections.SortedSet`1.Count"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is a <c>null</c> reference.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedSet`1"/> class.
            </summary>
            <remarks>
            This constructor is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedSet`1.Count">
            <summary>
            Gets the number of elements contained in this <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
            <value>
            The number of elements contained in this <see cref="T:BST.Collections.SortedSet`1"/>.
            </value>
            <remarks>
            Retrieving the value of this property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedSet`1.BST#Collections#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BST.Collections.SortedSet`1"/>
            is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:BST.Collections.SortedSet`1"/> is read-only;
            otherwise, <c>false</c>. This property always returns <c>false</c>.
            </value>
            <remarks>
            <para>
            A collection that is read-only does not allow the addition, removal, or
            modification of elements after the collection is created.
            </para>
            <para>
            Retrieving the value of this property is an O(1) operation.
            </para>
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedSet`1.Node">
            <summary>
            Represents a node in the <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
            <remarks>
            The <see cref="T:BST.Collections.SortedSet`1.Node"/> contains a value, a reference to the parent node,
            a reference to the left child node, a reference to the right child node
            and a balance factor for this node.
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedSet`1.Node.Item">
            <summary>
            The object contained in this node.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedSet`1.Node.Parent">
            <summary>
            The reference to the parent node of this <see cref="T:BST.Collections.SortedSet`1.Node"/> or <c>null</c>
            if this <see cref="T:BST.Collections.SortedSet`1.Node"/> is the root node in the balanced binary tree.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedSet`1.Node.Left">
            <summary>
            The reference to the left child node of this <see cref="T:BST.Collections.SortedSet`1.Node"/>
            or <c>null</c> if this <see cref="T:BST.Collections.SortedSet`1.Node"/> has no left child node.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedSet`1.Node.Right">
            <summary>
            The reference to the right child node of this <see cref="T:BST.Collections.SortedSet`1.Node"/>
            or <c>null</c> if this <see cref="T:BST.Collections.SortedSet`1.Node"/> has no right child node.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedSet`1.Node.Balance">
            <summary>
            The balance factor of this node.
            </summary>
            <remarks>
            The balance factor of a node is the height of its right subtree minus the height
            of its left subtree. A node with balance factor 1, 0, or -1 is considered balanced.
            A node with balance factor -2 or 2 is considered unbalanced and requires rebalancing
            the tree.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedSet`1.Node.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedSet`1.Node"/> class containing the
            specified value.
            </summary>
            <param name="item">
            The object to contain in the <see cref="T:BST.Collections.SortedSet`1.Node"/>.
            </param>
            <remarks>
            The <see cref="F:BST.Collections.SortedSet`1.Node.Parent"/>, <see cref="F:BST.Collections.SortedSet`1.Node.Left"/>, and <see cref="F:BST.Collections.SortedSet`1.Node.Right"/> fields are
            initialized to <c>null</c>. The <see cref="F:BST.Collections.SortedSet`1.Node.Balance"/> factor field is initialized
            to zero.
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedSet`1.Node.#ctor(`0,BST.Collections.SortedSet{`0}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedSet`1.Node"/> class containing the
            specified value and the reference to the parent node of this <see cref="T:BST.Collections.SortedSet`1.Node"/>.
            </summary>
            <param name="item">
            The object to contain in the <see cref="T:BST.Collections.SortedSet`1.Node"/>.
            </param>
            <param name="parent">
            The reference to the parent node of this <see cref="T:BST.Collections.SortedSet`1.Node"/>.
            </param>
            <remarks>
            The <see cref="F:BST.Collections.SortedSet`1.Node.Left"/> and <see cref="F:BST.Collections.SortedSet`1.Node.Right"/> fields are initialized to
            <c>null</c>. The <see cref="F:BST.Collections.SortedSet`1.Node.Balance"/> factor field is initialized to zero.
            </remarks>
        </member>
        <member name="T:BST.Collections.SortedSet`1.AscendingOrderEnumerator">
            <summary>
            Enumerates the elements of the <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
            <remarks>
            <para>
            The elements are enumerated in ascending order.
            </para>
            <para>
            Initially, the enumerator is positioned before the first element in the collection.
            At this position, <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> is undefined. Therefore, <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/>
            must be called to advance the enumerator to the first element of the collection before
            reading the value of <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/>.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> is
            called. <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is
            positioned after the last element in the collection and <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/>
            returns <c>false</c>. When the enumerator is at this position, subsequent calls to
            <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> also return <c>false</c>. If the last call to
            <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> is undefined.
            <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> cannot be set to the first element of the collection again.
            A new enumerator instance must be created instead.
            </para>
            <para>
            An enumerator remains valid as long as the collection remains unchanged. If changes
            are made to the collection, such as adding, modifying, or deleting elements, the
            enumerator behavior is undefined.
            </para>
            <para>
            The enumerator does not have exclusive access to the collection; therefore,
            enumerating through a collection is intrinsically not a thread-safe procedure.
            To guarantee thread safety during enumeration, the collection can be locked
            during the entire enumeration. To allow the collection to be accessed by
            multiple threads for reading and writing, a custom synchronization must be
            implemented.
            </para>
            <para>
            The <see cref="T:BST.Collections.SortedSet`1.AscendingOrderEnumerator"/> is not designed to provide
            any fast-fail safety mechanisms against concurrent modifications.
            </para>
            </remarks>
        </member>
        <member name="F:BST.Collections.SortedSet`1.AscendingOrderEnumerator._Next">
            <summary>
            The <see cref="T:BST.Collections.SortedSet`1.Node"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="F:BST.Collections.SortedSet`1.AscendingOrderEnumerator._Current">
            <summary>
            The element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:BST.Collections.SortedSet`1"/>.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <remarks>
            <para>
            After an enumerator is created, the enumerator is positioned before the first element
            in the collection, and the first call to <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> advances the
            enumerator to the first element of the collection.
            </para>
            <para>
            If <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> passes the end of the collection, the enumerator is positioned
            after the last element in the collection and <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> returns <c>false</c>.
            When the enumerator is at this position, subsequent calls to <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/>
            also return <c>false</c>.
            </para> 
            </remarks>
        </member>
        <member name="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the <see cref="T:BST.Collections.SortedSet`1"/>.
            This method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Always thrown since this operation is not supported.
            </exception>
        </member>
        <member name="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.System#IDisposable#Dispose">
            <summary>
            Releases all resources allocated by the <see cref="T:BST.Collections.SortedSet`1.AscendingOrderEnumerator"/>.
            </summary>
        </member>
        <member name="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.#ctor(BST.Collections.SortedSet{`0}.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:BST.Collections.SortedSet`1.AscendingOrderEnumerator"/>
            structure with the specified <paramref name="node"/>.
            </summary>
            <param name="node">
            The node from which to start enumerating the
            <see cref="T:BST.Collections.SortedSet`1"/> elements.
            </param>
        </member>
        <member name="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedSet`1"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedSet`1"/> at the current
            position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
        <member name="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the <see cref="T:BST.Collections.SortedSet`1"/> at
            the current position of the enumerator. 
            </summary>
            <value>
            The element in the <see cref="T:BST.Collections.SortedSet`1"/> at the current
            position of the enumerator.
            </value>
            <remarks>
            <para>
            <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> is undefined under any of the following conditions:
            1) The enumerator is positioned before the first element in the collection,
            immediately after the enumerator is created. <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> must be
            called to advance the enumerator to the first element of the collection
            before reading the value of <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/>; 2) The last call to
            <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> returned <c>false</c>, which indicates the end of
            the collection; 3) The collection was modified after the enumerator was created.
            </para>
            <para>
            <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> returns the same object until <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/>
            is called. <see cref="M:BST.Collections.SortedSet`1.AscendingOrderEnumerator.MoveNext"/> sets <see cref="P:BST.Collections.SortedSet`1.AscendingOrderEnumerator.Current"/> to the next element.
            </para>
            </remarks>
        </member>
    </members>
</doc>
